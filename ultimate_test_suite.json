{
  "integer_overflow_tests": [
    {
      "name": "max_int_overflow",
      "program": "2147483647 1 INTEGER.+",
      "description": "Maximum i32 + 1 should overflow"
    },
    {
      "name": "min_int_underflow",
      "program": "-2147483648 1 INTEGER.-",
      "description": "Minimum i32 - 1 should underflow"
    },
    {
      "name": "large_multiplication_overflow",
      "program": "1000000 1000000 INTEGER.*",
      "description": "1 million * 1 million"
    },
    {
      "name": "alternating_overflow_underflow",
      "program": "2147483647 2147483647 INTEGER.+ 2147483647 INTEGER.- 2147483647 INTEGER.+",
      "description": "Overflow then underflow then overflow"
    },
    {
      "name": "division_min_by_minus_one",
      "program": "-2147483648 -1 INTEGER./",
      "description": "Special case: MIN / -1 can overflow"
    }
  ],
  "float_special_values": [
    {
      "name": "float_positive_infinity",
      "program": "1.0 0.0 FLOAT./",
      "description": "Division by zero might produce infinity"
    },
    {
      "name": "float_negative_infinity",
      "program": "-1.0 0.0 FLOAT./",
      "description": "Negative division by zero"
    },
    {
      "name": "float_nan_from_zero_div_zero",
      "program": "0.0 0.0 FLOAT./",
      "description": "0.0 / 0.0 might produce NaN"
    },
    {
      "name": "float_very_small_numbers",
      "program": "1.0e-300 1.0e-300 FLOAT.*",
      "description": "Multiplication of tiny numbers"
    },
    {
      "name": "float_very_large_numbers",
      "program": "1.0e300 1.0e300 FLOAT.*",
      "description": "Multiplication of huge numbers"
    },
    {
      "name": "float_precision_loss",
      "program": "0.1 0.2 FLOAT.+ 0.3 FLOAT.=",
      "description": "Classic float precision test: 0.1 + 0.2 == 0.3?"
    }
  ],
  "negative_number_edge_cases": [
    {
      "name": "negative_modulo_positive",
      "program": "-7 3 INTEGER.%",
      "description": "Negative dividend, positive divisor"
    },
    {
      "name": "positive_modulo_negative",
      "program": "7 -3 INTEGER.%",
      "description": "Positive dividend, negative divisor"
    },
    {
      "name": "negative_modulo_negative",
      "program": "-7 -3 INTEGER.%",
      "description": "Both negative"
    },
    {
      "name": "integer_division_rounding_negative",
      "program": "-7 2 INTEGER./",
      "description": "How does integer division round with negatives?"
    },
    {
      "name": "zero_minus_negative",
      "program": "0 -5 INTEGER.-",
      "description": "0 - (-5) = 5"
    }
  ],
  "stack_manipulation_extremes": [
    {
      "name": "swap_deep_stack",
      "program": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 INTEGER.SWAP",
      "description": "SWAP on 20-element stack"
    },
    {
      "name": "rot_minimal",
      "program": "1 2 3 INTEGER.ROT",
      "description": "ROT with exactly 3 elements"
    },
    {
      "name": "dup_chain_20",
      "program": "1 INTEGER.DUP INTEGER.DUP INTEGER.DUP INTEGER.DUP INTEGER.DUP INTEGER.DUP INTEGER.DUP INTEGER.DUP INTEGER.DUP INTEGER.DUP INTEGER.DUP INTEGER.DUP INTEGER.DUP INTEGER.DUP INTEGER.DUP INTEGER.DUP INTEGER.DUP INTEGER.DUP INTEGER.DUP INTEGER.DUP",
      "description": "20 consecutive DUPs"
    },
    {
      "name": "pop_until_empty",
      "program": "1 2 3 4 5 INTEGER.POP INTEGER.POP INTEGER.POP INTEGER.POP INTEGER.POP INTEGER.POP INTEGER.POP",
      "description": "More POPs than elements"
    },
    {
      "name": "alternating_push_pop",
      "program": "1 INTEGER.POP 2 INTEGER.POP 3 INTEGER.POP 4 INTEGER.POP 5",
      "description": "Alternating push and pop"
    }
  ],
  "complex_arithmetic_patterns": [
    {
      "name": "factorial_5_unrolled",
      "program": "5 INTEGER.DUP 1 INTEGER.- INTEGER.DUP 1 INTEGER.- INTEGER.DUP 1 INTEGER.- INTEGER.DUP 1 INTEGER.- INTEGER.* INTEGER.* INTEGER.* INTEGER.*",
      "description": "5! = 120 computed manually"
    },
    {
      "name": "fibonacci_10th",
      "program": "0 1 INTEGER.DUP2 INTEGER.+ INTEGER.DUP2 INTEGER.+ INTEGER.DUP2 INTEGER.+ INTEGER.DUP2 INTEGER.+ INTEGER.DUP2 INTEGER.+ INTEGER.DUP2 INTEGER.+ INTEGER.DUP2 INTEGER.+ INTEGER.DUP2 INTEGER.+ INTEGER.DUP2 INTEGER.+ INTEGER.DROP INTEGER.DROP",
      "description": "10th Fibonacci number (if DUP2/DROP exist)"
    },
    {
      "name": "nested_arithmetic",
      "program": "10 5 INTEGER.- 3 INTEGER.* 2 INTEGER.DUP INTEGER.* INTEGER.+ 7 INTEGER.% 2 INTEGER.+",
      "description": "((10-5)*3 + 2Â²) % 7 + 2"
    },
    {
      "name": "power_of_two_chain",
      "program": "2 INTEGER.DUP INTEGER.* INTEGER.DUP INTEGER.* INTEGER.DUP INTEGER.* INTEGER.DUP INTEGER.*",
      "description": "2^16 by repeated squaring"
    },
    {
      "name": "alternating_ops",
      "program": "100 2 INTEGER./ 3 INTEGER.* 4 INTEGER./ 5 INTEGER.* 6 INTEGER./ 7 INTEGER.*",
      "description": "100/2*3/4*5/6*7"
    }
  ],
  "boolean_logic_chains": [
    {
      "name": "demorgan_law_1",
      "program": "TRUE FALSE BOOLEAN.AND BOOLEAN.NOT TRUE BOOLEAN.NOT FALSE BOOLEAN.NOT BOOLEAN.OR BOOLEAN.=",
      "description": "!(A && B) == (!A || !B)"
    },
    {
      "name": "demorgan_law_2",
      "program": "TRUE FALSE BOOLEAN.OR BOOLEAN.NOT TRUE BOOLEAN.NOT FALSE BOOLEAN.NOT BOOLEAN.AND BOOLEAN.=",
      "description": "!(A || B) == (!A && !B)"
    },
    {
      "name": "boolean_xor_simulation",
      "program": "TRUE FALSE BOOLEAN.DUP2 BOOLEAN.AND BOOLEAN.NOT BOOLEAN.ROT BOOLEAN.ROT BOOLEAN.OR BOOLEAN.AND",
      "description": "A XOR B = (A OR B) AND NOT (A AND B)"
    },
    {
      "name": "complex_boolean_expression",
      "program": "TRUE FALSE TRUE BOOLEAN.AND BOOLEAN.OR FALSE BOOLEAN.NOT BOOLEAN.AND TRUE BOOLEAN.OR",
      "description": "(T OR (F AND T)) AND (NOT F) OR T"
    },
    {
      "name": "boolean_from_comparison_chain",
      "program": "5 3 INTEGER.> 10 10 INTEGER.= BOOLEAN.AND 7 9 INTEGER.< BOOLEAN.OR 0 1 INTEGER.< BOOLEAN.AND",
      "description": "((5>3) AND (10==10) OR (7<9)) AND (0<1)"
    }
  ],
  "mixed_type_operations": [
    {
      "name": "parallel_arithmetic",
      "program": "10 20 5.5 2.5 INTEGER.+ FLOAT.+ INTEGER.DUP FLOAT.DUP INTEGER.* FLOAT.*",
      "description": "Parallel operations on int and float stacks"
    },
    {
      "name": "comparison_cross_feeding",
      "program": "10 5 INTEGER.> 3.14 2.71 FLOAT.> BOOLEAN.AND 100 99 INTEGER.< BOOLEAN.OR",
      "description": "Integer and float comparisons feeding boolean"
    },
    {
      "name": "type_specific_edge_cases",
      "program": "0 0 INTEGER./ 0.0 0.0 FLOAT./ TRUE FALSE BOOLEAN.AND INTEGER.POP FLOAT.POP",
      "description": "Different behavior for int vs float division by zero"
    },
    {
      "name": "stack_size_mismatch",
      "program": "1 2 3 INTEGER.+ INTEGER.+ 1.0 FLOAT.+ TRUE BOOLEAN.AND",
      "description": "Different stack depths across types"
    }
  ],
  "empty_and_single_element_ops": [
    {
      "name": "all_ops_empty_stack",
      "program": "INTEGER.+ INTEGER.- INTEGER.* INTEGER./ INTEGER.% INTEGER.DUP INTEGER.SWAP INTEGER.ROT INTEGER.POP",
      "description": "All operations on empty stack"
    },
    {
      "name": "all_ops_single_element",
      "program": "42 INTEGER.+ INTEGER.- INTEGER.* INTEGER./ INTEGER.% INTEGER.DUP INTEGER.SWAP INTEGER.ROT",
      "description": "All operations with only one element"
    },
    {
      "name": "build_and_destroy",
      "program": "1 2 3 4 5 6 7 8 9 10 INTEGER.POP INTEGER.POP INTEGER.POP INTEGER.POP INTEGER.POP INTEGER.POP INTEGER.POP INTEGER.POP INTEGER.POP INTEGER.POP INTEGER.DUP",
      "description": "Build stack then destroy it"
    }
  ],
  "associativity_and_order": [
    {
      "name": "left_associative_subtraction",
      "program": "10 5 3 INTEGER.- INTEGER.-",
      "description": "(10 - 5) - 3 = 2"
    },
    {
      "name": "right_associative_subtraction",
      "program": "10 5 INTEGER.SWAP 3 INTEGER.SWAP INTEGER.- INTEGER.SWAP INTEGER.-",
      "description": "10 - (5 - 3) = 8 (if done with swaps)"
    },
    {
      "name": "division_associativity",
      "program": "100 10 2 INTEGER./ INTEGER./",
      "description": "(100 / 10) / 2 = 5"
    },
    {
      "name": "mixed_operations_order",
      "program": "2 3 INTEGER.+ 4 INTEGER.* 10 2 INTEGER./ INTEGER.-",
      "description": "(2 + 3) * 4 - (10 / 2)"
    }
  ],
  "stress_tests": [
    {
      "name": "thousand_element_stack",
      "program": "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1",
      "description": "100 elements (truncated for readability)"
    },
    {
      "name": "deep_computation_chain",
      "program": "1 2 INTEGER.+ 3 INTEGER.+ 4 INTEGER.+ 5 INTEGER.+ 6 INTEGER.+ 7 INTEGER.+ 8 INTEGER.+ 9 INTEGER.+ 10 INTEGER.+ 11 INTEGER.+ 12 INTEGER.+ 13 INTEGER.+ 14 INTEGER.+ 15 INTEGER.+ 16 INTEGER.+ 17 INTEGER.+ 18 INTEGER.+ 19 INTEGER.+ 20 INTEGER.+",
      "description": "Sum of 1 to 20"
    },
    {
      "name": "swap_storm",
      "program": "1 2 3 4 5 6 7 8 9 10 INTEGER.SWAP INTEGER.SWAP INTEGER.SWAP INTEGER.SWAP INTEGER.SWAP INTEGER.SWAP INTEGER.SWAP INTEGER.SWAP INTEGER.SWAP INTEGER.SWAP INTEGER.SWAP INTEGER.SWAP INTEGER.SWAP INTEGER.SWAP INTEGER.SWAP INTEGER.SWAP INTEGER.SWAP INTEGER.SWAP INTEGER.SWAP INTEGER.SWAP",
      "description": "20 swaps on 10 element stack"
    }
  ],
  "parser_edge_cases": [
    {
      "name": "multiple_spaces",
      "program": "1    2     INTEGER.+",
      "description": "Multiple spaces between tokens"
    },
    {
      "name": "trailing_spaces",
      "program": "1 2 INTEGER.+    ",
      "description": "Trailing spaces"
    },
    {
      "name": "leading_spaces",
      "program": "    1 2 INTEGER.+",
      "description": "Leading spaces"
    },
    {
      "name": "empty_program",
      "program": "",
      "description": "Completely empty program"
    },
    {
      "name": "only_spaces",
      "program": "     ",
      "description": "Program with only spaces"
    },
    {
      "name": "single_literal",
      "program": "42",
      "description": "Just a number"
    },
    {
      "name": "float_formats",
      "program": "3.14 .5 1. 1e3 1.5e-3 FLOAT.+ FLOAT.+ FLOAT.+ FLOAT.+",
      "description": "Various float formats"
    }
  ],
  "error_recovery": [
    {
      "name": "multiple_division_by_zero",
      "program": "10 0 INTEGER./ 20 0 INTEGER./ 30 0 INTEGER./",
      "description": "Multiple division by zero errors"
    },
    {
      "name": "error_then_valid_op",
      "program": "INTEGER.+ 5 6 INTEGER.+",
      "description": "Error followed by valid operation"
    },
    {
      "name": "interleaved_errors",
      "program": "1 INTEGER.+ 2 3 INTEGER.+ INTEGER.* 4 INTEGER.SWAP 5 INTEGER.+",
      "description": "Valid ops between errors"
    }
  ],
  "boundary_tests": [
    {
      "name": "zero_edge_cases",
      "program": "0 0 INTEGER.+ 0 INTEGER.* 1 0 INTEGER.- 0 INTEGER.DUP INTEGER.=",
      "description": "Zero in various contexts"
    },
    {
      "name": "one_edge_cases",
      "program": "1 1 INTEGER.* 10 1 INTEGER./ 5 1 INTEGER.% 1 INTEGER.DUP INTEGER.=",
      "description": "One as identity element"
    },
    {
      "name": "negative_one_cases",
      "program": "-1 -1 INTEGER.* 10 -1 INTEGER.* -5 -1 INTEGER./",
      "description": "Negative one special cases"
    }
  ],
  "instruction_completeness": [
    {
      "name": "all_integer_ops",
      "program": "10 3 INTEGER.+ INTEGER.DUP 2 INTEGER.- 4 INTEGER.* 2 INTEGER./ 3 INTEGER.% INTEGER.SWAP INTEGER.ROT INTEGER.POP 5 INTEGER.< 5 INTEGER.= 5 INTEGER.>",
      "description": "Use every integer instruction"
    },
    {
      "name": "all_float_ops",
      "program": "10.5 3.2 FLOAT.+ FLOAT.DUP 2.0 FLOAT.- 4.0 FLOAT.* 2.0 FLOAT./ 3.0 FLOAT.% FLOAT.SWAP FLOAT.ROT FLOAT.POP 5.0 FLOAT.< 5.0 FLOAT.= 5.0 FLOAT.>",
      "description": "Use every float instruction"
    },
    {
      "name": "all_boolean_ops",
      "program": "TRUE FALSE BOOLEAN.AND BOOLEAN.DUP TRUE BOOLEAN.OR BOOLEAN.NOT BOOLEAN.SWAP BOOLEAN.ROT BOOLEAN.POP TRUE BOOLEAN.AND",
      "description": "Use every boolean instruction"
    }
  ],
  "previous_basic_tests": [
    {
      "name": "integer_add_simple",
      "program": "1 2 INTEGER.+",
      "description": "Basic addition"
    },
    {
      "name": "integer_add_multiple",
      "program": "1 2 3 INTEGER.+ INTEGER.+",
      "description": "Multiple additions"
    },
    {
      "name": "integer_subtract",
      "program": "5 3 INTEGER.-",
      "description": "Basic subtraction"
    },
    {
      "name": "integer_multiply",
      "program": "4 3 INTEGER.*",
      "description": "Basic multiplication"
    },
    {
      "name": "integer_divide",
      "program": "10 3 INTEGER./",
      "description": "Integer division"
    },
    {
      "name": "integer_modulo",
      "program": "10 3 INTEGER.%",
      "description": "Modulo operation"
    },
    {
      "name": "float_add",
      "program": "1.5 2.5 FLOAT.+",
      "description": "Float addition"
    },
    {
      "name": "float_subtract",
      "program": "5.5 2.0 FLOAT.-",
      "description": "Float subtraction"
    },
    {
      "name": "float_multiply",
      "program": "2.5 4.0 FLOAT.*",
      "description": "Float multiplication"
    },
    {
      "name": "float_divide",
      "program": "10.0 4.0 FLOAT./",
      "description": "Float division"
    },
    {
      "name": "integer_dup",
      "program": "5 INTEGER.DUP",
      "description": "Duplicate integer"
    },
    {
      "name": "integer_swap",
      "program": "1 2 INTEGER.SWAP",
      "description": "Swap top two integers"
    },
    {
      "name": "integer_rot",
      "program": "1 2 3 INTEGER.ROT",
      "description": "Rotate top three integers"
    },
    {
      "name": "integer_pop",
      "program": "1 2 3 INTEGER.POP",
      "description": "Pop top integer"
    },
    {
      "name": "boolean_and_true",
      "program": "TRUE TRUE BOOLEAN.AND",
      "description": "Boolean AND true case"
    },
    {
      "name": "boolean_and_false",
      "program": "TRUE FALSE BOOLEAN.AND",
      "description": "Boolean AND false case"
    },
    {
      "name": "boolean_or",
      "program": "TRUE FALSE BOOLEAN.OR",
      "description": "Boolean OR"
    },
    {
      "name": "boolean_not",
      "program": "TRUE BOOLEAN.NOT",
      "description": "Boolean NOT"
    },
    {
      "name": "integer_equal_true",
      "program": "5 5 INTEGER.=",
      "description": "Integer equality true"
    },
    {
      "name": "integer_equal_false",
      "program": "5 3 INTEGER.=",
      "description": "Integer equality false"
    },
    {
      "name": "integer_less_than",
      "program": "3 5 INTEGER.<",
      "description": "Integer less than"
    },
    {
      "name": "integer_greater_than",
      "program": "5 3 INTEGER.>",
      "description": "Integer greater than"
    }
  ]
}